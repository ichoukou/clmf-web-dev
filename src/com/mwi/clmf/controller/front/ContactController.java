package com.mwi.clmf.controller.front;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;import javax.servlet.http.Cookie;import com.jfinal.aop.Before;import com.jfinal.aop.Clear;import com.jfinal.core.Controller;import com.jfinal.plugin.activerecord.Page;import com.mwi.clmf.interceptor.FrontInterceptor;import com.mwi.clmf.model.ContactPersonModel;import com.mwi.clmf.model.ContactRequestModel;import com.mwi.clmf.model.guest.GuestInforModel;import com.mwi.clmf.util.Validator;public class ContactController extends Controller {	@Clear	@Before(FrontInterceptor.class)	public void index(){			}		// 我的联系人	@Clear	@Before(FrontInterceptor.class)	public void myFriends(){		String chinese_name = Validator.isNull(getPara("chinese_name")) ? null : getPara("chinese_name");		String english_name = Validator.isNull(getPara("english_name")) ? null : getPara("english_name");		String ch_organ_name = Validator.isNull(getPara("ch_organ_name")) ? null : getPara("ch_organ_name");		String post = Validator.isNull(getPara("post")) ? null : getPara("post");				setAttr("list", ContactPersonModel.cpDao.getContactPerson(chinese_name, english_name, ch_organ_name, post, (Long)getSessionAttr("guestId")));		setAttr("chinese_name", chinese_name);		setAttr("english_name", english_name);		setAttr("ch_organ_name", ch_organ_name);		setAttr("post", post);		render("myFriends.jsp");	}	// 寻找联系人	@Clear	@Before(FrontInterceptor.class)	public void findFriends(){		String chinese_name = Validator.isNull(getPara("chinese_name")) ? null : getPara("chinese_name");		String english_name = Validator.isNull(getPara("english_name")) ? null : getPara("english_name");		String ch_organ_name = Validator.isNull(getPara("ch_organ_name")) ? null : getPara("ch_organ_name");		String post = Validator.isNull(getPara("post")) ? null : getPara("post");		Integer currentPage = getParaToInt("currentPage") == null ? 1 : getParaToInt("currentPage");		Integer currentSize = getParaToInt("currentSize") == null ? 10 : getParaToInt("currentSize");		Page<GuestInforModel> pageList = GuestInforModel.guestDao.pageList(chinese_name, english_name, ch_organ_name, post, currentPage, currentSize);		List<GuestInforModel> list = pageList.getList();		for (GuestInforModel li : list) {			ContactRequestModel cr = ContactRequestModel.crDao.getRequest((Long)getSessionAttr("guestId"), li.getLong("id"), 2);			if(cr == null){				ContactPersonModel cp = ContactPersonModel.cpDao.getContact((Long)getSessionAttr("guestId"), li.getLong("id"));				if(cp == null){					li.put("request_status", 0);				}else{					li.put("request_status", 2);				}			}else{				li.put("request_status", 1);			}		}		setAttr("pageList", pageList);		setAttr("chinese_name", chinese_name);		setAttr("english_name", english_name);		setAttr("ch_organ_name", ch_organ_name);		setAttr("post", post);		render("findFriends.jsp");	}	// @我的	@Clear	@Before(FrontInterceptor.class)	public void myInfo(){		setAttr("contactMe", ContactRequestModel.crDao.getRequest((Long)getSessionAttr("guestId")));		render("myInfo.jsp");	}		// 推荐联系人	@Clear	@Before(FrontInterceptor.class)	public void recommend(){		boolean bl = true;		Long[] from_user = getParaValuesToLong("from_user");		if(from_user.length > 0 ){			Long to_user = getParaToLong("to_user");			GuestInforModel gi = GuestInforModel.guestDao.findById(getSessionAttr("guestId"));			String content = "推荐人：" + gi.getStr("chinese_name")+ "  " + getPara("content");			for (Long fu : from_user) {				ContactPersonModel cp = ContactPersonModel.cpDao.getContact(to_user, fu);				if(cp == null){					bl = new ContactRequestModel().set("from_user", fu)												  .set("to_user", to_user)												  .set("content", content)												  .set("send_time", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date(System.currentTimeMillis())))												  .set("success_status", 2)												  .set("reply_status", 2).save();				}			}		}		renderJson(bl);	}		// 批量推荐联系人	@Clear	@Before(FrontInterceptor.class)	public void batchRecommend(){		boolean bl = true;		String to_user = getPara("to_user");		if(to_user.length() > 0){			to_user = to_user.substring(0, to_user.length() - 1);			String[] to_user_id = to_user.split(",");			for (String str : to_user_id) {				Long[] from_user = getParaValuesToLong("from_user");				if(from_user.length > 0 ){					GuestInforModel gi = GuestInforModel.guestDao.findById(getSessionAttr("guestId"));					String content = "推荐人：" + gi.getStr("chinese_name")+ "  " + getPara("content");					for (Long fu : from_user) {						ContactPersonModel cp = ContactPersonModel.cpDao.getContact(Long.valueOf(str), fu);						if(cp == null && Long.valueOf(str) != fu){							bl = new ContactRequestModel().set("from_user", fu)														  .set("to_user", Long.valueOf(str))														  .set("content", content)														  .set("send_time", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date(System.currentTimeMillis())))														  .set("success_status", 2)														  .set("reply_status", 2).save();						}					}				}			}		}		renderJson(bl);	}		// 删除联系人	@Clear	@Before(FrontInterceptor.class)	public void delContactPerson(){		Long cpId = getParaToLong("cpId");		boolean bl = ContactPersonModel.cpDao.deleteById(cpId);		System.out.println("del contact:-- "+bl);		redirect("/contact/myFriends");	}		// 回复请求	@Clear	@Before(FrontInterceptor.class)	public void replyRequest(){		Long cr_id = getParaToLong("cr_id");		Integer invitation = getParaToInt("invitation");		String content = getPara("content");		ContactRequestModel cr = ContactRequestModel.crDao.findById(cr_id);		boolean bl = cr.set("reply_msg", content).set("reply_status", invitation == 1 ? 1 : 0).set("success_status", invitation == 1 ? 1 : 0).update();		boolean suc = false;		if(bl && invitation == 1){			ContactPersonModel cp = ContactPersonModel.cpDao.getContact(cr.getLong("to_user"), cr.getLong("from_user"));			if(cp == null){				suc = new ContactPersonModel().set("user_id", getSessionAttr("guestId"))											  .set("guest_id", cr.getLong("from_user"))											  .set("add_time", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())).save();			}		}		Cookie cookie = new Cookie("resultCode", suc ? "1" : "0");		getResponse().addCookie(cookie);		redirect("/contact/myInfo");	}		// 发送请求	@Clear	@Before(FrontInterceptor.class)	public void sendRequest(){		Long to_user = getParaToLong("to_user");		String content = getPara("content");		boolean bl = new ContactRequestModel().set("from_user", getSessionAttr("guestId"))				  							  .set("to_user", to_user)				  							  .set("content", content)				  							  .set("send_time", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date(System.currentTimeMillis())))				  							  .set("success_status", 2)				  							  .set("reply_status", 2).save();		Cookie cookie = new Cookie("sendCode", bl ? "1" : "0");		getResponse().addCookie(cookie);		redirect("/contact/findFriends");	}		// 取消请求	@Clear	@Before(FrontInterceptor.class)	public void cancelRequest(){		Long to_user = getParaToLong("to_user");		ContactRequestModel cr = ContactRequestModel.crDao.getRequest((Long)getSessionAttr("guestId"), to_user, 2);		boolean suc = false;		if(cr != null){			suc = cr.delete();		}		Cookie cookie = new Cookie("cancelCode", suc ? "1" : "0");		getResponse().addCookie(cookie);		redirect("/contact/findFriends");	}	}